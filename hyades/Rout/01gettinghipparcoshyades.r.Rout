
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R es un software libre y viene sin GARANTIA ALGUNA.
Usted puede redistribuirlo bajo ciertas circunstancias.
Escriba 'license()' o 'licence()' para detalles de distribucion.

R es un proyecto colaborativo con muchos contribuyentes.
Escriba 'contributors()' para obtener más información y
'citation()' para saber cómo citar R o paquetes de R en publicaciones.

Escriba 'demo()' para demostraciones, 'help()' para el sistema on-line de ayuda,
o 'help.start()' para abrir el sistema de ayuda HTML con su navegador.
Escriba 'q()' para salir de R.

[Previously saved workspace restored]

> #!/usr/bin/R
> #getwd()
> #setwd('C:/somethingnull/git/tools/hyades/')
> simbadO = read.table('simbad.csv', header=T, sep=';')
> hipparcosO = read.table('HIPPARCOS.csv', header=T, sep=';')
> 
> #cut columns
> simbad = data.frame(Id= simbadO$identifier,RA_J2000 = simbadO$RA_J2000, DE_J2000=simbadO$DE_J2000)
> hipparcos = data.frame(ID_HIP = hipparcosO$HIP, RA_J2000=hipparcosO$RA_J2000, DE_J2000=hipparcosO$DE_J2000)
> 
> simbad = as.matrix(simbad) 	
> hipparcos = as.matrix(hipparcos)
> 
> cruzados = read.table('id_cruzados.csv', header=T, sep=',')
> mdistances = dist(rbind(hipparcos[1:nrow(hipparcos),2:3], simbad[1:nrow(simbad),2:3]))
> #if is R 2.15 this
> #mdistances = dist(rbind(hipparcos[1:nrow(hipparcos),2:3], simbad[1:nrow(simbad),2:3]), upper=FALSE, diag=FALSE)
> 
> 
> #dist to matrix 
> mdist =as.matrix(mdistances)
> 
> #delete lower
> mdist[lower.tri(mdist, diag=TRUE)] <- NA
> 
> #matrix to vector
> vecdist <- c(mdist)
> 
> #delete index with NA
> vecdist <- vecdist[!is.na(vecdist)]
> 
> 
> ############################################################
> # giselle's theorem :P
> #filtering distances with the second min. other process.
> #get the min distance between the join HIP and simbad.
> ############################################################
> 
> row.names(cruzados) <- NULL
> mcruzados = as.matrix(cruzados)
> for (i in 1:nrow(mcruzados)) {
+ 
+ 	#create a mini matrix with one row.
+ 	mnewmini = rbind(mcruzados[i,3:4], mcruzados[i,5:6])
+ 
+ 	#matriz distance	
+ 	disti =  dist(mnewmini)
+ 
+ 	##adding distance to dataframe.
+ 	#format sci
+ 	cruzados$distancia[i] =	format(disti , sci = FALSE)
+ 	
+ 	#printdataframe
+ 	cruzados$distancia[i]
+ }
> 
> #save distances in a new column.
> write.csv(cruzados, 'id_cruzadoswithdistance.csv')
> 
> #maximum known distance between hipparcos y simbad 
> maxjoindist = max(cruzados$distancia)
> 
> #compare distances with the max, this get the index where the value is lower than maxjoindist
> vecdist2 = which(vecdist > 0)
> vecdist2 = which(vecdist < as.numeric(maxjoindist))
> #print (vecdist[vecdist2])
> 
> #getting index from mdistances
> getindexs <- function (i, mdist) {
+ 	return (which(mdist == vecdist[vecdist2[i]], arr.ind = TRUE))
+ }
> star =  array(0,dim=c(0,2))
> tam = length(vecdist2)
> 
> for (i in 1:length(vecdist2)) {
+ 	tmp = getindexs(i, mdist)
+ 	print (i)
+ 	cat ('/')
+ 	print (tam)
+ 	star <- rbind(star, tmp)
+ }
[1] 1
/[1] 57
[1] 2
/[1] 57
[1] 3
/[1] 57
[1] 4
/[1] 57
[1] 5
/[1] 57
[1] 6
/[1] 57
[1] 7
/[1] 57
[1] 8
/[1] 57
[1] 9
/[1] 57
[1] 10
/[1] 57
[1] 11
/[1] 57
[1] 12
/[1] 57
[1] 13
/[1] 57
[1] 14
/[1] 57
[1] 15
/[1] 57
[1] 16
/[1] 57
[1] 17
/[1] 57
[1] 18
/[1] 57
[1] 19
/[1] 57
[1] 20
/[1] 57
[1] 21
/[1] 57
[1] 22
/[1] 57
[1] 23
/[1] 57
[1] 24
/[1] 57
[1] 25
/[1] 57
[1] 26
/[1] 57
[1] 27
/[1] 57
[1] 28
/[1] 57
[1] 29
/[1] 57
[1] 30
/[1] 57
[1] 31
/[1] 57
[1] 32
/[1] 57
[1] 33
/[1] 57
[1] 34
/[1] 57
[1] 35
/[1] 57
[1] 36
/[1] 57
[1] 37
/[1] 57
[1] 38
/[1] 57
[1] 39
/[1] 57
[1] 40
/[1] 57
[1] 41
/[1] 57
[1] 42
/[1] 57
[1] 43
/[1] 57
[1] 44
/[1] 57
[1] 45
/[1] 57
[1] 46
/[1] 57
[1] 47
/[1] 57
[1] 48
/[1] 57
[1] 49
/[1] 57
[1] 50
/[1] 57
[1] 51
/[1] 57
[1] 52
/[1] 57
[1] 53
/[1] 57
[1] 54
/[1] 57
[1] 55
/[1] 57
[1] 56
/[1] 57
[1] 57
/[1] 57
> 
> #star contain the index of stars more closed to be hyades. 
> #getting the registers.
> 
> mallmerge = rbind(hipparcos[1:nrow(hipparcos),2:3], simbad[1:nrow(simbad),2:3])
> 
> newhyades <- data.frame(fila=NA, columna=NA, RA_J2001=NA, DE_J2001=NA,RA_J2000=NA, DE_J2000=NA )
> newhyades$fila <- 0
> newhyades$columna  <-0
> newhyades$RA_J2001  <- 0
> newhyades$DE_J2001  <- 0
> newhyades$RA_J2000  <- 0
> newhyades$DE_J2000  <- 0
> 
> tam = nrow(star)
> 
> for (i in 1:nrow(star)) {
+ 	#print (star[i,1]) 
+ 	#print (star[i,2])
+ 	print (i)
+ 	cat('/')
+ 	print (tam)
+ 	newhyades[i,1] = star[i,1] 
+ 	newhyades[i,2] = star[i,2] 
+ 	newhyades[i,3:4] = mallmerge [star[i,1],]
+ 	newhyades[i,5:6] = mallmerge [star[i,2],]
+ }
[1] 1
/[1] 83
[1] 2
/[1] 83
[1] 3
/[1] 83
[1] 4
/[1] 83
[1] 5
/[1] 83
[1] 6
/[1] 83
[1] 7
/[1] 83
[1] 8
/[1] 83
[1] 9
/[1] 83
[1] 10
/[1] 83
[1] 11
/[1] 83
[1] 12
/[1] 83
[1] 13
/[1] 83
[1] 14
/[1] 83
[1] 15
/[1] 83
[1] 16
/[1] 83
[1] 17
/[1] 83
[1] 18
/[1] 83
[1] 19
/[1] 83
[1] 20
/[1] 83
[1] 21
/[1] 83
[1] 22
/[1] 83
[1] 23
/[1] 83
[1] 24
/[1] 83
[1] 25
/[1] 83
[1] 26
/[1] 83
[1] 27
/[1] 83
[1] 28
/[1] 83
[1] 29
/[1] 83
[1] 30
/[1] 83
[1] 31
/[1] 83
[1] 32
/[1] 83
[1] 33
/[1] 83
[1] 34
/[1] 83
[1] 35
/[1] 83
[1] 36
/[1] 83
[1] 37
/[1] 83
[1] 38
/[1] 83
[1] 39
/[1] 83
[1] 40
/[1] 83
[1] 41
/[1] 83
[1] 42
/[1] 83
[1] 43
/[1] 83
[1] 44
/[1] 83
[1] 45
/[1] 83
[1] 46
/[1] 83
[1] 47
/[1] 83
[1] 48
/[1] 83
[1] 49
/[1] 83
[1] 50
/[1] 83
[1] 51
/[1] 83
[1] 52
/[1] 83
[1] 53
/[1] 83
[1] 54
/[1] 83
[1] 55
/[1] 83
[1] 56
/[1] 83
[1] 57
/[1] 83
[1] 58
/[1] 83
[1] 59
/[1] 83
[1] 60
/[1] 83
[1] 61
/[1] 83
[1] 62
/[1] 83
[1] 63
/[1] 83
[1] 64
/[1] 83
[1] 65
/[1] 83
[1] 66
/[1] 83
[1] 67
/[1] 83
[1] 68
/[1] 83
[1] 69
/[1] 83
[1] 70
/[1] 83
[1] 71
/[1] 83
[1] 72
/[1] 83
[1] 73
/[1] 83
[1] 74
/[1] 83
[1] 75
/[1] 83
[1] 76
/[1] 83
[1] 77
/[1] 83
[1] 78
/[1] 83
[1] 79
/[1] 83
[1] 80
/[1] 83
[1] 81
/[1] 83
[1] 82
/[1] 83
[1] 83
/[1] 83
> write.csv(newhyades, 'newcandidatetohyades.csv')
> 
> ##end giselle's theorem
> ####################################################################
> 
> #next do a pam
> 
> proc.time()
   user  system elapsed 
  9.252   1.009  10.289 
